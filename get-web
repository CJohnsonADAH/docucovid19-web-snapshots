#!/bin/bash

SCRIPT_PATH=$( readlink -f "$0" )
SCRIPT_DIR=$( dirname "${SCRIPT_PATH}" )
SCREENCAP_DIR="${SCRIPT_DIR}/screencaps"
PATH="${SCRIPT_DIR}:${SCREENCAP_DIR}:${PATH}"

DATA_URL="$1" ; shift
SITE_TAG="$1" ; shift
DATESTAMP="$1" ; shift
DATA_DIR="$1" ; shift
STEP="$1" ; shift
STEPMOD="$1" ; shift
DURATION="$1" ; shift

WG_INCLUDE=""
WG_EXCLUDE="--no-parent"
declare -A WG_ARGV=()

WG_ARGV[no-check-certificate]="" # off by default; individual sites can turn it on
WG_ARGV[recursive]="--recursive"
WG_ARGV[level]="--level=1"
WG_ARGV[timestamping]="--timestamping"
WG_ARGV[convert-links]="--convert-links"
WG_ARGV[page-requisites]="--page-requisites"
WG_ARGV[backup-converted]="--backup-converted"
WG_ARGV[adjust-extension]="--adjust-extension"
WG_ARGV[restrict-file-names]="--restrict-file-names=windows"
WG_ARGV[timeout]="--timeout=20"
WG_ARGV[tries]="--tries=10"

while [ ! -z "$1" ] ; do
	if [[ "$1" =~ ^--include-directories= ]] ; then
		WG_INCLUDE="$1"
		WG_EXCLUDE="--exclude-directories=*"
	elif [[ "$1" =~ ^--([^=]+)(=.+)? ]] ; then
		WG_ARGV["${BASH_REMATCH[1]}"]="$1"
	fi
	shift
done

if [[ "${DATESTAMP}" == "--first" ]] ; then
	DATESTAMP=""
	STEP=0
	STEPMOD=4
fi

if [ -z "${STEP}" ] ; then
	STEP=0
fi
if [ -z "${STEPMOD}" ] ; then
	STEPMOD=1
fi

DAYSTEPS=4
SITESTEP=$(( STEP % STEPMOD ))
RATIO=$(( STEPMOD / DAYSTEPS ))
OFFCYCLE=$(( SITESTEP % RATIO ))

if [[ "${OFFCYCLE}" -gt 0 ]] ; then
	TS_TODAY=$( date )
	printf "Deferring HTML front page dump of %s (%d-day cycle): %s" "${DATA_URL}" "${RATIO}" "${TS_TODAY}"
	exit
fi

if [ -z "${DATA_DIR}" ] ; then
	DATA_DIR="${HOME}/covid-data"
fi
if [ -z "${DATESTAMP}" ] ; then
	DATESTAMP=$( TZ="UTC" date +"%Y%m%d%H%M%SZ" )
fi

HTMLPAGE_DATA="${DATA_DIR}/html"
if [ ! -z "${SITE_TAG}" ] ; then
	HTMLPAGE_DATA="${HTMLPAGE_DATA}/${SITE_TAG}"
fi
HTMLPAGE_DATA="${HTMLPAGE_DATA}-"

# fetch the basic HTML

URL_OUT="${HTMLPAGE_DATA}${DATESTAMP}.url.txt"
DATA_OUT="${HTMLPAGE_DATA}${DATESTAMP}.html"
DATA_PNG="${HTMLPAGE_DATA}${DATESTAMP}.png"
HEAD_OUT="${HTMLPAGE_DATA}${DATESTAMP}.head"
WARC_OUT="${HTMLPAGE_DATA}${DATESTAMP}"

echo "${DATA_URL}" > "${URL_OUT}"
wget ${WG_ARGV[no-check-certificate]} --output-document="${DATA_OUT}" --warc-file="${WARC_OUT}" "${DATA_URL}"

	LWD="${PWD}"
	cd "${SCREENCAP_DIR}"
	node --unhandled-rejections=strict ./screencap.js --headless "${DATA_URL}" "${DATA_PNG}" "${DURATION}"
	cd "${LWD}"

# mirror the site
WG_WARC=""
if [[ "${SITESTEP}" -eq 0 ]] ; then
	WG_WARC="--warc-file=${SITE_TAG}-${DATESTAMP}"
fi

	cd "${DATA_DIR}"
	MIRROR_DIR="${DATA_DIR}/mirror_${SITE_TAG}"
	if [ ! -d "${MIRROR_DIR}" ] ; then
		mkdir --verbose "${MIRROR_DIR}"
	fi
	cd "${MIRROR_DIR}"

	if [ ! -d "./warc" ] ; then
		mkdir ./warc
	fi
	mv *.warc *.warc.gz ./warc

	echo '$' wget  ${WG_INCLUDE} ${WG_EXCLUDE} ${WG_WARC} ${WG_ARGV[@]} "${DATA_URL}"

	wget ${WG_INCLUDE} ${WG_EXCLUDE} ${WG_WARC} ${WG_ARGV[@]} "${DATA_URL}"

	#mkdir --verbose "${HTMLPAGE_DATA}${DATESTAMP}.mirror"
	#cd "${HTMLPAGE_DATA}${DATESTAMP}.mirror"

	SNAPSHOTDIR=${DATA_DIR}/html/snapshots/${SITE_TAG}
	if [ ! -d "${SNAPSHOTDIR}" ] ; then
		mkdir --parents "${SNAPSHOTDIR}"
	fi

	cd "${MIRROR_DIR}"
	find -name '*.warc' -exec gzip \{\} \;

	echo '$' make-snapshot.pl "${MIRROR_DIR}/" "${SNAPSHOTDIR}" --timestamp="${DATESTAMP}"
	make-snapshot.pl "${MIRROR_DIR}/" "${SNAPSHOTDIR}" --timestamp="${DATESTAMP}" --exclude=warc


echo "Completed HTML front page dump of ${DATA_URL}: " $( date )

