#!/bin/bash

SCRIPT_PATH=$( which "$0" )
SCRIPT_DIR=$( dirname "${SCRIPT_PATH}" )
PATH="${SCRIPT_DIR}:${PATH}"

DATA_SERVER="alacovdat.dev.radgeek.net"
DATA_SLUG="covid-data"
DATA_DIR="${HOME}/${DATA_SLUG}"

if [[ ! -d "${DATA_DIR}" ]] ; then
	mkdir --parents --verbose "${DATA_DIR}"
fi
cd "${DATA_DIR}"

DATAONLY=0
WEBONLY=0
if [ ! -z "$1" ] ; then
	if [ "$1" == "--sync" ] ; then
		echo "=== Sync: Preparing for Transmit ==="
		find -name '*.warc' -exec gzip \{\} \;
		echo "... transmitting via rsync ..."
		rsync --archive --itemize-changes --progress --exclude="mirror_*" --exclude="${DATA_SERVER}" ./ ${DATA_SERVER}:${DATA_SLUG}/
		exit
	elif [ "$1" == "--data" ] ; then
		DATAONLY=1
		shift
	elif [ "$1" == "--web" ] ; then
		WEBONLY=1
		shift
	fi
fi

if [[ "${DATAONLY}" -eq 0 ]] ; then
	STEP_FILE="${DATA_DIR}/snapshot-step.txt"
	STEP_PERIOD=4

	if [ -r "${STEP_FILE}" ] ; then
		STEP=$( cat "${DATA_DIR}/snapshot-step.txt" )
	else
		STEP=3
	fi
	STEP=$(( (STEP + 1) % STEP_PERIOD ))
	printf "%d\n" "${STEP}" > "${STEP_FILE}"

	printf "*** Step %d of %d ...\n" "${STEP}" "${STEP_PERIOD}"

fi

DATESTAMP=$( TZ="UTC" date +"%Y%m%d%H%M%SZ" )

if [[ "${WEBONLY}" -eq 0 ]] ; then

	printf "*** Getting data ...\n"

DATA_PATH='https://services7.arcgis.com/4RQmZZ0yaZkGR1zy/arcgis/rest/services/COV19_Public_Dashboard_ReadOnly/FeatureServer/0/query'
DATA_PARAMS='where=1%3D1&outFields=CNTYNAME%2CCNTYFIPS%2CCONFIRMED%2CDIED%2Creported_death&returnGeometry=false'
DATA_URL="${DATA_PATH}?f=json&${DATA_PARAMS}"

get-data "${DATA_URL}" "confirmeddiedreported" "${DATESTAMP}" "${DATA_DIR}"

DATA_PATH='https://services7.arcgis.com/4RQmZZ0yaZkGR1zy/arcgis/rest/services/COV19_Public_Dashboard_ReadOnly/FeatureServer/0/query'
DATA_PARAMS='returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&outSR=102100&resultOffset=0&resultRecordCount=69&cacheHint=true&where=CONFIRMED%20%3E=%200'

DATA_URL="${DATA_PATH}?f=json&${DATA_PARAMS}"

get-data "${DATA_URL}" "confirmeddied" "${DATESTAMP}" "${DATA_DIR}"

DATA_PATH="https://services7.arcgis.com/4RQmZZ0yaZkGR1zy/arcgis/rest/services/COVID19_testsites_READ_ONLY/FeatureServer/0/query"
DATA_PARAMS='where=1%3D1&returnGeometry=true&spatialRel=esriSpatialRelIntersects&outFields=*&maxRecordCountFactor=4&outSR=102100&resultOffset=0&resultRecordCount=8000&cacheHint=true&quantizationParameters=%7B%22mode%22%3A%22view%22%2C%22originPosition%22%3A%22upperLeft%22%2C%22tolerance%22%3A1.0583333333333338%2C%22extent%22%3A%7B%22xmin%22%3A-9821126.399120873%2C%22ymin%22%3A3483922.583299004%2C%22xmax%22%3A-9478628.407981059%2C%22ymax%22%3A4616413.594372874%2C%22spatialReference%22%3A%7B%22wkid%22%3A102100%2C%22latestWkid%22%3A3857%7D%7D%7D'
DATA_URL="${DATA_PATH}?f=json&${DATA_PARAMS}"

get-data "${DATA_URL}" "testsites" "${DATESTAMP}" "${DATA_DIR}"

fi

if [[ "${DATAONLY}" -eq 0 ]] ; then

wget --mirror "http://${DATA_SERVER}/sources.tsv.txt"
while IFS="" read LINE; do
	WWW_PERIOD=$( printf "%s" "$LINE" | cut -f 1 )
	WWW_SLUG=$( printf "%s" "$LINE" | cut -f 2 )
	WWW_URL=$( printf "%s" "$LINE" | cut -f 3 )

	if [ ! -z "${WWW_URL}" ] ; then
		get-web "${WWW_URL}" "${WWW_SLUG}" "${DATESTAMP}" "${DATA_DIR}" "${STEP}" "${WWW_PERIOD}"
	fi
done < "${DATA_DIR}/${DATA_SERVER}/sources.tsv.txt"

echo "Completed web snapshots: " $( date )

fi

cd "${DATA_DIR}"
find -name '*.warc' -not -path '*/html/snapshots/*' -exec gzip \{\} \;

exit

